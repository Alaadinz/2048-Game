{"ast":null,"code":"var _jsxFileName = \"/Users/alaadinz/01-starting-setup/src/components/Jeux.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from \"react\";\nimport { getEmptytab, generateRandom, moveLeft, moveRight, moveUp, moveDown, isOver, checkWin } from \"./TabJeux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst score = (increment, onMouvement);\n\nconst Cell = ({\n  number\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `cell cell-${number}`,\n    children: number > 0 ? number : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Cell;\n\nconst Jeux = () => {\n  _s();\n\n  const [tab, updatetab] = useState(generateRandom(getEmptytab()));\n\n  const checkEndGame = () => {\n    if (checkWin(tab)) {\n      console.log(\"le jeu est terminé avec succes\");\n    } else if (isOver(tab)) {\n      //score = 0;\n      console.log(\"le jeu est terminé sans succes\");\n    }\n  }; //Mouvements\n\n\n  const left = () => {\n    const newtab = moveLeft(tab);\n    updatetab(generateRandom(newtab)); //score++;\n\n    onMouvement == true;\n    checkEndGame();\n  };\n\n  const right = () => {\n    const newtab = moveRight(tab);\n    updatetab(generateRandom(newtab)); //score++\n\n    checkEndGame();\n  };\n\n  const down = () => {\n    const newtab = moveDown(tab);\n    updatetab(generateRandom(newtab)); //score++;\n\n    checkEndGame();\n  };\n\n  const up = () => {\n    const newtab = moveUp(tab);\n    updatetab(generateRandom(newtab)); //score++;\n\n    checkEndGame();\n  };\n\n  const onKey = e => {\n    switch (e.key) {\n      case \"ArrowUp\":\n        up();\n        break;\n\n      case \"ArrowDown\":\n        down();\n        break;\n\n      case \"ArrowLeft\":\n        left();\n        break;\n\n      case \"ArrowRight\":\n        right();\n        break;\n\n      default:\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", onKey);\n    return () => {\n      window.removeEventListener(\"keydown\", onKey);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab\",\n      children: tab.map((row, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(Cell, {\n            number: cell\n          }, `cell-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this))\n        }, `row-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Jeux, \"C+r4GWnz+AZUwTyYoZO3NMpPcqQ=\");\n\n_c2 = Jeux;\nexport default Jeux;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Jeux\");","map":{"version":3,"sources":["/Users/alaadinz/01-starting-setup/src/components/Jeux.js"],"names":["React","Component","useEffect","useState","getEmptytab","generateRandom","moveLeft","moveRight","moveUp","moveDown","isOver","checkWin","score","increment","onMouvement","Cell","number","Jeux","tab","updatetab","checkEndGame","console","log","left","newtab","right","down","up","onKey","e","key","window","addEventListener","removeEventListener","map","row","i","cell","j"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\n\nimport {\n    getEmptytab,\n    generateRandom,\n    moveLeft,\n    moveRight,\n    moveUp,\n    moveDown,\n    isOver,\n    checkWin\n  } from \"./TabJeux\";\n\n  const score =(increment, onMouvement)\n  const Cell = ({number}) =>{\n      return (\n      <div className={`cell cell-${number}`}>{number > 0 ? number : \"\"}</div>\n      );\n \n  };\n\n  const Jeux = () => {\n    const [tab, updatetab] = useState(generateRandom(getEmptytab()));\n  \n    const checkEndGame = () => {\n      if (checkWin(tab)) {\n        console.log(\"le jeu est terminé avec succes\");\n      } else if (isOver(tab)) {\n        //score = 0;\n        console.log(\"le jeu est terminé sans succes\");\n      }\n    };\n\n\n    //Mouvements\n    const left = () => {\n        const newtab = moveLeft(tab);\n        updatetab(generateRandom(newtab));\n        //score++;\n        onMouvement == true;\n        checkEndGame();\n    };\n\n    const right = () => {\n        const newtab = moveRight(tab);\n        updatetab(generateRandom(newtab));\n        //score++\n        checkEndGame();\n    };\n\n    const down = () => {\n        const newtab = moveDown(tab);\n        updatetab(generateRandom(newtab));\n        //score++;\n        checkEndGame();\n    };\n\n    const up = () => {\n        const newtab = moveUp(tab);\n        updatetab(generateRandom(newtab));\n        //score++;\n        checkEndGame();\n    };\n\n\n\n    const onKey = (e) => {\n        \n        \n        switch (e.key){\n            \n            case \"ArrowUp\":\n                up();\n                break;\n            \n            case \"ArrowDown\":\n                    down();\n                    break;\n            \n            case \"ArrowLeft\":\n                        left();\n                        break;\n           \n            case \"ArrowRight\":\n                    right();\n                    break;\n\n                    default:\n      }\n    };\n\n    useEffect(\n        ()=> {\n            window.addEventListener(\"keydown\", onKey);\n\n            return () =>{\n                window.removeEventListener(\"keydown\", onKey);\n            };\n        }\n    );\n\n\n    return (\n        <>\n      \n        <div className=\"tab\">\n            {tab.map((row, i)=>{\n                return(\n                    <div key={`row-${i}`} className=\"row\">\n                        {row.map((cell, j) => (\n                <Cell key={`cell-${i}-${j}`} number={cell} />\n                        ))}\n                        </div>\n                );\n\n            })}\n            </div>\n            </>\n    );\n        };\n\n\n        export default Jeux;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}