{"ast":null,"code":"export const getEmptyBoard = () => [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]; //Pour verifier si la matrice has a value \n\nconst hasValue = (board, value) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === value) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}; //Pour verifier si le board rempli n'a pas de 0 cell\n\n\nexport const isFull = board => {\n  return !hasValue(board, 0);\n};","map":{"version":3,"sources":["/Users/alaadinz/01-starting-setup/src/components/GameBoard.js"],"names":["getEmptyBoard","hasValue","board","value","i","length","j","isFull"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,MAAM,CAE/B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAF+B,EAG/B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAH+B,EAI/B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAJ+B,EAK/B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAL+B,CAA5B,C,CASP;;AACA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC/B,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,KAAK,CAACG,MAArB,EAA6BD,CAAC,EAA9B,EAAiC;AAC7B,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,KAAK,CAACG,MAArB,EAA6BC,CAAC,EAA9B,EAAiC;AAC7B,UAAGJ,KAAK,CAACE,CAAD,CAAL,CAASE,CAAT,MAAgBH,KAAnB,EAAyB;AACrB,eAAO,IAAP;AACH;AACJ;AACJ;;AACD,SAAO,KAAP;AACH,CATD,C,CAYA;;;AACA,OAAO,MAAMI,MAAM,GAAIL,KAAD,IAAW;AAC7B,SAAO,CAACD,QAAQ,CAACC,KAAD,EAAO,CAAP,CAAhB;AACH,CAFM","sourcesContent":["export const getEmptyBoard = () => [\n    \n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n]\n\n\n//Pour verifier si la matrice has a value \nconst hasValue = (board, value) => {\n    for(let i=0; i<board.length; i++){\n        for(let j=0; j<board.length; j++){\n            if(board[i][j] === value){\n                return true;\n            }\n        }\n    } \n    return false;\n};\n\n\n//Pour verifier si le board rempli n'a pas de 0 cell\nexport const isFull = (board) => {\n    return !hasValue(board,0);\n};\n"]},"metadata":{},"sourceType":"module"}