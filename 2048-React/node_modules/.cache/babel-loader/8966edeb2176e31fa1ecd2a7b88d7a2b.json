{"ast":null,"code":"export const getEmptytab = () => [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]; //Pour verifier si la matrice has a value \n\nconst hasValue = (tab, value) => {\n  for (let i = 0; i < tab.length; i++) {\n    for (let j = 0; j < tab.length; j++) {\n      if (tab[i][j] === value) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}; //Pour verifier si le tab rempli n'a pas de 0 cell\n\n\nexport const isFull = tab => {\n  return !hasValue(tab, 0);\n};\n\nconst getRandomPos = () => {\n  const rowPos = Math.floor(Math.random() * 4);\n  const colPos = Math.floor(Math.random() * 4);\n  return [rowPos, colPos];\n};\n\nexport const generateRandom = tab => {\n  if (isFull(tab)) {\n    return tab;\n  }\n\n  let [row, col] = getRandomPos();\n\n  while (tab[row][col] !== 0) {\n    [row, col] = getRandomPos();\n  }\n\n  tab[row][col] = 2;\n  return tab;\n};\n\nconst compress = tab => {\n  const newTab = getEmptytab();\n\n  for (let i = 0; i < tab.length; i++) {\n    let colIndex = 0;\n\n    for (let j = 0; j < tab[i].length; j++) {\n      if (tab[i][j] !== 0) {\n        newTab[i][colIndex] = tab[i][j];\n        colIndex++;\n      }\n    }\n  }\n\n  return newTab;\n}; //Merger les cells avec same value \n\n\nconst merge = tab => {\n  for (let i = 0; i < tab.length; i++) {\n    for (let j = 0; j < tab[i].length - 1; j++) {\n      if (tab[i][j] !== 0 && tab[i][j] === tab[i][j + 1]) {\n        tab[i][j] = tab[i][j] * 2;\n        tab[i][j + 1] = 0;\n      }\n    }\n  }\n\n  return tab;\n};\n\nexport const moveLeft = tab => {\n  const newtab1 = compress(tab);\n  const newtab2 = merge(newtab1);\n  return compress(newtab2);\n};\n\nconst reverse = tab => {\n  const reversetab = getEmptytab();\n\n  for (let i = 0; i < tab.length; i++) {\n    for (let j = 0; j < tab[i].length; j++) {\n      reversetab[i][j] = tab[i][tab[i].length - 1 - j];\n    }\n  }\n\n  return reversetab;\n};\n\nexport const moveRight = tab => {\n  const reversetab = reverse(tab);\n  const newtab = moveLeft(reversetab);\n  return reverse(newtab);\n}; // -90deg  rotatetab[i][j] = tab[j][tab[i].length-1-i];\n\nconst rotateLeft = tab => {\n  const rotatetab = getEmptytab();\n\n  for (let i = 0; i < tab.length; i++) {\n    for (let j = 0; j < tab[i].length; j++) {\n      rotatetab[i][j] = tab[j][tab[i].length - 1 - i];\n    }\n  }\n\n  return rotatetab;\n}; // 90 deg rotatetab[i][j] = tab[tab[i].length - 1 -j][i];\n\n\nconst rotationDroite = tab => {\n  const rotatetab = getEmptytab();\n\n  for (let i = 0; i < tab.length; i++) {\n    for (let j = 0; j < tab[i].length; j++) {\n      rotatetab[i][j] = tab[tab[i].length - 1 - j][i];\n    }\n  }\n\n  return rotatetab;\n};\n\nexport const moveUp = tab => {\n  const rotatetab = rotateLeft(tab);\n  const newtab = moveLeft(rotatetab);\n  return rotationDroite(newtab);\n};\nexport const moveDown = tab => {\n  const rotatetab = rotationDroite(tab);\n  const newtab = moveLeft(rotatetab);\n  return rotateLeft(newtab);\n};\nexport const checkWin = tab => {\n  return hasValue(tab, 2048); //Returns TRUE si valeur 2048\n};\n\nconst estDifferent = (tab, updatedtab) => {\n  for (let i = 0; i < tab.length; i++) {\n    for (let j = 0; j < tab[i].length; j++) {\n      if (tab[i][j] !== updatedtab[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const isOver = tab => {\n  if (estDifferent(tab, moveLeft(tab))) {\n    return false;\n  }\n\n  if (estDifferent(tab, moveRight(tab))) {\n    return false;\n  }\n\n  if (estDifferent(tab, moveDown(tab))) {\n    return false;\n  }\n\n  if (estDifferent(tab, moveUp(tab))) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/alaadinz/01-starting-setup/src/components/TabJeux.js"],"names":["getEmptytab","hasValue","tab","value","i","length","j","isFull","getRandomPos","rowPos","Math","floor","random","colPos","generateRandom","row","col","compress","newTab","colIndex","merge","moveLeft","newtab1","newtab2","reverse","reversetab","moveRight","newtab","rotateLeft","rotatetab","rotationDroite","moveUp","moveDown","checkWin","estDifferent","updatedtab","isOver"],"mappings":"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","sourcesContent":["export const getEmptytab = () => [\n    \n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n]\n\n//Pour verifier si la matrice has a value \nconst hasValue = (tab, value) => {\n    for(let i=0; i<tab.length; i++){\n        for(let j=0; j<tab.length; j++){\n            if(tab[i][j] === value){\n                return true;\n            }\n        }\n    } \n    return false;\n};\n\n//Pour verifier si le tab rempli n'a pas de 0 cell\nexport const isFull = (tab) => {\n    return !hasValue(tab,0);\n};\n\nconst getRandomPos = () =>{\n    const rowPos = Math.floor(Math.random() * 4);\n    const colPos = Math.floor(Math.random() * 4);\n    return [rowPos,colPos];\n\n}\n\nexport const generateRandom = (tab) => {\n    if (isFull(tab)) {\n        return tab;\n    }\n    let [row,col] = getRandomPos();\n    while (tab[row][col] !== 0){\n        [row, col] = getRandomPos();\n    }\n\n    tab[row][col] = 2;\n    return tab;\n};\n\n\n\nconst compress = (tab) => {\n    const newTab = getEmptytab();\n\n    for (let i=0; i< tab.length; i++) {\n        let colIndex = 0;\n        for (let j=0; j<tab[i].length;j++){\n            if(tab[i][j] !==0){\n                newTab[i][colIndex] = tab[i][j];\n                colIndex++;\n            }\n        }\n    }\n    return newTab;\n};\n\n//Merger les cells avec same value \nconst merge = (tab) => {\n    for (let i=0; i<tab.length; i++){\n        for(let j=0; j<tab[i].length-1; j++){\n            \n            if (tab[i][j] !==0 && tab[i][j] === tab[i][j + 1]){\n                tab[i][j] = tab[i][j] *2;\n                tab[i][j+1] =0;\n            }\n        }\n    }\n    return tab;\n};\n\nexport const moveLeft = (tab) =>{\n    const newtab1 = compress(tab);\n    const newtab2 = merge (newtab1);\n    return compress(newtab2);\n};\n\nconst reverse = (tab) => {\n    const reversetab = getEmptytab();\n\n    for (let i=0; i<tab.length; i++){\n        for (let j=0; j<tab[i].length; j++){\n            reversetab[i][j] = tab[i][tab[i].length-1-j];\n        }\n    }\n    return reversetab;\n};\n\nexport const moveRight = (tab) =>{\n    const reversetab = reverse(tab);\n    const newtab = moveLeft(reversetab);\n    return reverse(newtab);\n};\n\n// -90deg  rotatetab[i][j] = tab[j][tab[i].length-1-i];\nconst rotateLeft = (tab) =>{\n    const rotatetab = getEmptytab();\n    for (let i=0; i<tab.length; i++){\n        for (let j=0; j<tab[i].length; j++){\n            rotatetab[i][j] = tab[j][tab[i].length-1-i];\n        } \n}\nreturn rotatetab;\n};\n// 90 deg rotatetab[i][j] = tab[tab[i].length - 1 -j][i];\nconst rotationDroite = (tab) => {\n    const rotatetab = getEmptytab();\n    for (let i=0; i<tab.length; i++){\n        for (let j=0; j<tab[i].length; j++){\n            rotatetab[i][j] = tab[tab[i].length - 1 -j][i];\n        }\n    }\n    return rotatetab;\n};\n\n\nexport const moveUp = (tab) =>{\n    const rotatetab = rotateLeft(tab);\n    const newtab = moveLeft(rotatetab);\n    return rotationDroite(newtab);\n};\n\nexport const moveDown = (tab) => {\n    const rotatetab = rotationDroite(tab);\n    const newtab = moveLeft(rotatetab);\n    return rotateLeft(newtab);\n    \n};\n\nexport const checkWin = (tab) => {\n    return hasValue(tab, 2048); //Returns TRUE si valeur 2048\n};\n\nconst estDifferent = (tab, updatedtab) => {\n    for( let i= 0; i<tab.length; i++){\n        for (let j=0; j< tab[i].length; j++){\n            if(tab[i][j] !== updatedtab[i][j]){\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\nexport const isOver = (tab) => {\n    if (estDifferent(tab, moveLeft(tab))){\n        return false;\n    }\n    if (estDifferent(tab, moveRight(tab))){\n        return false;\n    }\n    if (estDifferent(tab, moveDown(tab))){\n        return false;\n    }\n    if (estDifferent(tab, moveUp(tab))){\n        return false;\n    }\n\n    return true;\n};"]},"metadata":{},"sourceType":"module"}